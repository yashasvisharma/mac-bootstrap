#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Mac computer with my dotfiles and
# other development preferences.
################################################################################


# Thank you, thoughtbot!
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[BOOTSTRAP] $fmt\\n" "$@"
}


################################################################################
# VARIABLE DECLARATIONS
################################################################################

osname=$(uname)

export COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
export OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup
export DICTIONARY_DIR=$HOME/Library/Spelling
export DOTFILES_REPO_URL="https://github.com/joshukraine/dotfiles.git"
export DOTFILES_DIR=$HOME/dotfiles
export BOOTSTRAP_REPO_URL="https://github.com/joshukraine/mac-bootstrap.git"
export BOOTSTRAP_DIR=$HOME/mac-bootstrap

DEFAULT_BOOTSTRAP_BRANCH="master"
DEFAULT_DOTFILES_BRANCH="master"
DEFAULT_COMPUTER_NAME="Yash's Mac"
DEFAULT_HOST_NAME="yashs-mac"
DEFAULT_TIME_ZONE="America/Chicago"
DEFAULT_NODEJS_VERSION="8.12.0"
DEFAULT_RUBY_VERSION="2.5.3"


################################################################################
# Make sure we're on a Mac before continuing
################################################################################

if [ "$osname" == "Linux" ]; then
  bootstrap_echo "Oops, looks like you're on a Linux machine. Please have a look at
  my Linux Bootstrap script: https://github.com/joshukraine/linux-bootstrap"
  exit 1
elif [ "$osname" != "Darwin" ]; then
  bootstrap_echo "Oops, it looks like you're using a non-UNIX system. This script
only supports Mac. Exiting..."
  exit 1
fi


################################################################################
# Check for presence of command line tools if macOS
################################################################################

if [ ! -d "$COMMANDLINE_TOOLS" ]; then
  bootstrap_echo "Apple's command line developer tools must be installed before
running this script. To install them, just run 'xcode-select --install' from
the terminal and then follow the prompts. Once the command line tools have been
installed, you can try running this script again."
  exit 1
fi


################################################################################
# Authenticate
################################################################################

sudo -v

# Keep-alive: update existing `sudo` time stamp until bootstrap has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


################################################################################
# Welcome and setup
################################################################################

echo
echo "*************************************************************************"
echo "*******                                                           *******"
echo "*******                 Welcome to Mac Bootstrap!                 *******"
echo "*******                                                           *******"
echo "*************************************************************************"
echo

printf "Before we get started, let's get some info about your setup.\\n"

printf "\\nBootstrap script will be cloned from:
==> %s.\\n\\n" "$BOOTSTRAP_REPO_URL"
printf "Which branch should we use? (Leave blank for default: %s)\\n" "$DEFAULT_BOOTSTRAP_BRANCH"
read -r -p "> " BOOTSTRAP_BRANCH
if [ -n "$BOOTSTRAP_BRANCH" ]; then
  export BOOTSTRAP_BRANCH
else
  export BOOTSTRAP_BRANCH="$DEFAULT_BOOTSTRAP_BRANCH"
fi

printf "\\nDotfiles will be cloned from:
==> %s.\\n\\n" "$DOTFILES_REPO_URL"
printf "Which branch should we use? (Leave blank for default: %s)\\n" "$DEFAULT_DOTFILES_BRANCH"
read -r -p "> " DOTFILES_BRANCH
if [ -n "$DOTFILES_BRANCH" ]; then
  export DOTFILES_BRANCH
else
  export DOTFILES_BRANCH="$DEFAULT_DOTFILES_BRANCH"
fi

printf "\\nEnter a name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_COMPUTER_NAME"
read -r -p "> " COMPUTER_NAME
export COMPUTER_NAME=${COMPUTER_NAME:-$DEFAULT_COMPUTER_NAME}

printf "\\nEnter a host name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_HOST_NAME"
read -r -p "> " HOST_NAME
export HOST_NAME=${HOST_NAME:-$DEFAULT_HOST_NAME}

printf "\\nEnter your desired time zone.
To view available options run \`sudo systemsetup -listtimezones\`
(Leave blank for default: %s)\\n" "$DEFAULT_TIME_ZONE"
read -r -p "> " TIME_ZONE
export TIME_ZONE=${TIME_ZONE:-$DEFAULT_TIME_ZONE}

printf "\\nWhich version of Node.js would you like to install?
Available versions: https://semver.io/node/versions
(Leave blank for default: %s)\\n" "$DEFAULT_NODEJS_VERSION"
read -r -p "> " ASDF_NODEJS_VERSION
export ASDF_NODEJS_VERSION=${ASDF_NODEJS_VERSION:-$DEFAULT_NODEJS_VERSION}

printf "\\nWhich version of Ruby would you like to install?
Available versions: https://raw.githubusercontent.com/postmodern/ruby-versions/master/ruby/versions.txt
(Leave blank for default: %s)\\n" "$DEFAULT_RUBY_VERSION"
read -r -p "> " ASDF_RUBY_VERSION
export ASDF_RUBY_VERSION=${ASDF_RUBY_VERSION:-$DEFAULT_RUBY_VERSION}

printf "\\nLooks good. Here's what we've got so far.\\n"
printf "Bootstrap branch: ==> [%s]\\n" "$BOOTSTRAP_BRANCH"
printf "Dotfiles branch:  ==> [%s]\\n" "$DOTFILES_BRANCH"
printf "Computer name:    ==> [%s]\\n" "$COMPUTER_NAME"
printf "Host name:        ==> [%s]\\n" "$HOST_NAME"
printf "Time zone:        ==> [%s]\\n" "$TIME_ZONE"
printf "Node.js version:  ==> [%s]\\n" "$ASDF_NODEJS_VERSION"
printf "Ruby version:     ==> [%s]\\n" "$ASDF_RUBY_VERSION"

echo
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
  echo "Exiting..."
  exit 1
fi


################################################################################
# Clone mac-bootstrap repo
################################################################################

bootstrap_echo "Cloning mac-bootstrap repo..."
git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"


################################################################################
# 1. Provision with my adaptation of Laptop (install/laptop)
################################################################################

bootstrap_echo "Step 1: Installing Laptop script..."

sh "$BOOTSTRAP_DIR"/install/laptop 2>&1 | tee ~/laptop.log

bootstrap_echo "Done!"


################################################################################
# 2. Install Oh-My-Zsh (http://ohmyz.sh/)
################################################################################

bootstrap_echo "Step 2: Installing Oh-My-Zsh..."

if [ -d "$HOME"/.oh-my-zsh ]; then
  rm -rf "$HOME"/.oh-my-zsh
fi

git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

bootstrap_echo "Done!"


################################################################################
# 3. Setup dotfiles (http://jsua.co/dotfiles)
################################################################################

bootstrap_echo "Step 3: Installing dotfiles..."

if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
source "$DOTFILES_DIR"/install.sh

bootstrap_echo "Done!"


################################################################################
# 4. Install ~/bin utilities
################################################################################

bootstrap_echo "Step 4: Installing ~/bin utilities..."

cp -R "$BOOTSTRAP_DIR"/bin/* "$HOME"/bin/

bootstrap_echo "Done!"


################################################################################
# 5. Set up Tmuxinator (https://github.com/tmuxinator/tmuxinator)
################################################################################

bootstrap_echo "Step 5: Setting up Tmuxinator..."

if [ ! -d "$HOME"/.tmuxinator/ ]; then
  mkdir "$HOME"/.tmuxinator
fi

cp "$BOOTSTRAP_DIR"/lib/default.yml "$HOME"/.tmuxinator/

bootstrap_echo "Done!"


################################################################################
# 6. Install Ukrainian language utilities
#
# Reference:
# * http://apple.stackexchange.com/a/11842/75491
# * http://extensions.services.openoffice.org/en/project/ukrainian-dictionary
################################################################################

bootstrap_echo "Step 6: Installing ~/.vimrc ..."

git clone https://github.com/CaffeineViking/vimrc.git ~/.vim_temp && cd ~/.vim_temp && ./setup.sh && rm -rf ~/.vim_temp && cd ~

bootstrap_echo "Done!"


################################################################################
# 7. Install Fira Code font
################################################################################

bootstrap_echo "Step 7: Installing Fira Code fixed-width font..."
if [ -d "$HOME"/src/fonts ]; then
  rm -rf "$HOME"/src/fonts
fi
git clone https://github.com/tonsky/FiraCode "$HOME"/src/fira-code
cp "$HOME"/src/fira-code/distr/ttf/* "$HOME"/Library/Fonts/
rm -rf "$HOME"/src/fira-code

bootstrap_echo "Done!"


################################################################################
# 8. Set macOS preferences
################################################################################

bootstrap_echo "Step 8: Setting macOS preferences..."

# shellcheck source=/dev/null
source "$BOOTSTRAP_DIR"/install/macos-defaults

# shellcheck source=/dev/null
source "$BOOTSTRAP_DIR"/install/macos-dock

rm -rf "$BOOTSTRAP_DIR"

bootstrap_echo "Done!"

echo
echo "**********************************************************************"
echo "**********************************************************************"
echo "****                                                              ****"
echo "**** Mac Bootstrap script complete! Please restart your computer. ****"
echo "****                                                              ****"
echo "**********************************************************************"
echo "**********************************************************************"
echo
